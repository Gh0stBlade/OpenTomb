#pragma once

#include <cstdint>
#include <memory>
#include <vector>

#include "vmath.h"

struct Room;
struct Portal;
class  Render;
struct OBB;
struct Polygon;
class Camera;

struct Frustum
{
    std::vector<Plane> planes;                                              // clip planes
    std::vector<btVector3> vertices;                                            // frustum vertices
    Plane norm;                                                  // main frustum clip plane (inv. plane of parent portal)

    uint16_t parents_count = 0;
    const Frustum* parent = nullptr;                                              // by who frustum was generated; parent == NULL is equal generated by camera

    bool hasParent(const Frustum& parent) const;
    bool isPolyVisible(const Polygon *p, const Camera& cam) const;
    bool isAABBVisible(const btVector3 &bbmin, const btVector3 &bbmax, const Camera& cam);
    bool isOBBVisible(OBB *obb, const Camera& cam);

    static Frustum* portalFrustumIntersect(Portal* portal, const Frustum& emitter, Render *render);         // Основная функция для работы с порталами.
    void splitPrepare(struct Portal *p);// подготовка фрустума к сплиту
    void genClipPlanes(Camera* cam);                      // генерация плоскостей отсечения
    int split_by_plane(const Plane &splitPlane);              // отсечение части портала плоскостью
};

/**
 * Draws wireframe of this frustum.
 *
 * Expected state:
 *  - Vertex array is enabled, color, tex coord, normal disabled
 *  - No vertex buffer object is bound
 *  - Texturing is disabled
 *  - Alpha test is disabled
 *  - Blending is enabled
 *  - Lighting is disabled
 *  - Line width is set to desired width (typically 3.0)
 *  - Current color set to desired color (typically red)
 * Ignored state:
 *  - Currently bound texture.
 *  - Currently bound element buffer.
 *  - Vertex pointer (changes it)
 * Changed state:
 *  - Current position will be arbitrary.
 *  - Vertex pointer will be arbitray.
 */
